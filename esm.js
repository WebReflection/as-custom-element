const e=!0,t=!1,a="querySelectorAll",l=new WeakMap,n=(e,t)=>{for(let a=0,{length:n}=e;a<n;a++){const{target:n,attributeName:c,oldValue:d}=e[a];if(l.has(n)){const{a:e}=l.get(n),t=n.getAttribute(c);e.forEach(((e,a)=>{-1<e.indexOf(c)&&a.call(n,c,d,t)}))}else t.disconnect()}};((l,n,c)=>{const d=(t,n,c,o,s)=>{for(let r=0,{length:i}=t;r<i;r++){const i=t[r];(s||a in i)&&(o?n.has(i)||(n.add(i),c.delete(i),l(i,o)):c.has(i)||(c.add(i),n.delete(i),l(i,o)),s||d((i.shadowRoot||i)[a]("*"),n,c,o,e))}},o=new(c||MutationObserver)((a=>{for(let l=new Set,n=new Set,c=0,{length:o}=a;c<o;c++){const{addedNodes:o,removedNodes:s}=a[c];d(s,l,n,t,t),d(o,l,n,e,t)}}));o.observe(n||document,{subtree:e,childList:e})})(((e,t)=>{l.has(e)&&l.get(e)[t?"c":"d"].forEach(o,e)}));const c=(e,{upgradedCallback:t,connectedCallback:a,disconnectedCallback:c,observedAttributes:d,attributeChangedCallback:o})=>{l.has(e)||l.set(e,{a:new Map,c:new Set,d:new Set}),t&&t.call(e);const{a:s,c:r,d:i}=l.get(e);if(o){new MutationObserver(n).observe(e,{attributes:!0,attributeOldValue:!0,attributeFilter:d.map((t=>{const a=e.getAttribute(t);return null!=a&&o.call(e,t,null,a),t}))}),s.set(o,d)}return c&&i.add(c),a&&(r.add(a),e.ownerDocument.compareDocumentPosition(e)&e.DOCUMENT_POSITION_DISCONNECTED||a.call(e)),e},d=(e,{downgradedCallback:t,connectedCallback:a,disconnectedCallback:n,attributeChangedCallback:c})=>{if(l.has(e)){const{a:d,c:o,d:s}=l.get(e);c&&d.delete(c),n&&s.delete(n),a&&o.delete(a),d.size+s.size+o.size<1&&l.delete(e),t&&t.call(e)}return e};function o(e){e.call(this)}export{d as downgrade,c as upgrade};

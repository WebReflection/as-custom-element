self.asCustomElement=function(t){"use strict";const e=new Set,a=new MutationObserver(t=>{e.forEach(n,t)});function n(t){t(this,a)}a.observe(document,{subtree:!0,childList:!0}),e.observer=a;const r=new WeakMap,o=t=>{for(let e=0,{length:a}=t;e<a;e++){const{target:a,attributeName:n,oldValue:o}=t[e],c=a.getAttribute(n);r.get(a).a[n].forEach(t=>{t.call(a,n,o,c)})}},c=(t,e)=>{for(let a=0,{length:n}=t;a<n;a++){const n=t[a];r.has(n)&&r.get(n)[e].forEach(s,n),c(n.children||[],e)}},l=new MutationObserver(o);e.add(t=>{for(let e=0,{length:a}=t;e<a;e++){const{addedNodes:a,removedNodes:n}=t[e];c(a,"c"),o(l.takeRecords()),c(n,"d")}});function s(t){t.call(this)}return t.default=(t,{connectedCallback:e,disconnectedCallback:a,observedAttributes:n,attributeChangedCallback:o})=>{const{a:c,c:s,d:d}=r.get(t)||(t=>{const e={a:{},c:new Set,d:new Set};return r.set(t,e),e})(t);return n&&(l.observe(t,{attributes:!0,attributeOldValue:!0,attributeFilter:n}),n.forEach(e=>{(c[e]||(c[e]=new Set)).add(o),t.hasAttribute(e)&&o.call(t,e,null,t.getAttribute(e))})),a&&d.add(a),e&&(s.add(e),t.ownerDocument.compareDocumentPosition(t)&t.DOCUMENT_POSITION_DISCONNECTED||e.call(t)),t},t}({}).default;
